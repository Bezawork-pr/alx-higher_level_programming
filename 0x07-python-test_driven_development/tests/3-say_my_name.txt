#3-say_my_name.txt

=================================== 
The ``say_my_name`` module 
=================================== 

Using ``say_my_name`` 
------------------- 

This is test file.  First import
``say_my_name`` from the ``3-say_my_name`` module:

	>>> say_my_name = __import__('3-say_my_name').say_my_name

NO PARAMETER
============
	>>> say_my_name()
	Traceback (most recent call last):
	TypeError: say_my_name() missing 1 required positional argument: 'first_name'

	>>> say_my_name("John") # doctest: +NORMALIZE_WHITESPACE 
	My name is John


NONE AS PARAMETER
=================
	>>> say_my_name(None, "John")
	Traceback (most recent call last):
	TypeError: first_name must be a string

	>>> say_my_name("John", None)
	Traceback (most recent call last):
	TypeError: last_name must be a string

NUMBERS AS A PARAMETER
======================
	>>> say_my_name(7, "John")
	Traceback (most recent call last):
	TypeError: first_name must be a string
	
	>>> say_my_name(7.0, "John")
	Traceback (most recent call last):
	TypeError: first_name must be a string

	>>> say_my_name("John", 9)
	Traceback (most recent call last):
	TypeError: last_name must be a string

	>>> say_my_name("John", 9.0)
	Traceback (most recent call last):
	TypeError: last_name must be a string

OTHER DATA_ TYPES AS PARAMETER
==============================
	>>> say_my_name("\n", "John") # doctest: +NORMALIZE_WHITESPACE
	My name is
	 John

	>>> say_my_name("John", "\n") # doctest: +NORMALIZE_WHITESPACE 
	My name is John
	<BLANKLINE>

DOCSTRING 
=========
                                                                                 
``3-say_my_name`` should contain more than 1 lines of file doctring 

Check if number of lines of docstring is more than 1:

	>>> bool(__import__('3-say_my_name').__doc__.count('\n') > 1)
	True

``say_my_name`` should contain more than 1 lines of function desciption: 

	>>> bool(say_my_name.__doc__.count('\n') > 1)
	True
